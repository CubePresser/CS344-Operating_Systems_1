#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#include <fcntl.h>

//Function that return

struct bgProcess
{
    pid_t bg_pid;
    int fin;
};


void executePrompt(char *);
void prompt();
char* getUserInput();
void changeDirectory(int, char* []);
void getStatus(int);
int tooManyArguments(int, int);
int isBG(int, char*[]);
void catchSIGINT(int);
void catchSIGTSTP(int);
void removeSymbols(char*[], int);

int main()
{
    struct sigaction SIGINT_action = {0}, SIGTSTP_action = {0};
    SIGINT_action.sa_handler = SIG_IGN;
    sigfillset(&SIGINT_action.sa_mask);
    SIGINT_action.sa_flags = SA_RESTART;

    SIGTSTP_action.sa_handler = catchSIGTSTP;

    sigaction(SIGINT, &SIGINT_action, NULL);

    prompt();
    return 0;
}

char* getUserInput()
{
    int numChars;
    while(1)
    {
        char *line = NULL;
        size_t size;
        numChars = getline(&line, &size, stdin);
        if(numChars == -1)
        {
            clearerr(stdin);
        }
        else
        {
            return line;
        }
    }
}

void prompt()
{
    char* argv[512];
    char cmdInput[2048];
    int i, k, childExitMethod, tempChildExitMethod, inputF, outputF, pidNum, tempArgc;
    wait(childExitMethod);
    pid_t spawnPid;

    
    sigset_t signalSet;
    sigfillset(&signalSet);
//    sigprocmask(SIG_SETMASK, &signalSet, NULL);

    struct sigaction SIGINT_action = {0}, SIGSTP_action = {0};

    struct bgProcess pidArr[256];
    pidNum = 0;

    while(1)
    {

        SIGINT_action.sa_handler = SIG_IGN;
        memset(cmdInput, '\0', sizeof(cmdInput));
        for(i=0;i<pidNum;i++)
        {
            //If background process is not completed
            if(!pidArr[i].fin)
            {
                //Check to see if child has terminated, if so, clean it up
                if(waitpid(pidArr[i].bg_pid, &tempChildExitMethod, WNOHANG))
                {
                    printf("background pid %d is done: ", pidArr[i].bg_pid);
                    getStatus(tempChildExitMethod);
                    pidArr[i].fin = 1;
                }
            }
        }
        i = 0;
        printf(": ");
        fflush(stdout);
        strcpy(cmdInput, getUserInput());
        argv[0] = strtok(cmdInput, " \n");
        if(argv[0] != NULL)
        {
            i=1;
            while((argv[i] = strtok(NULL, " \n")) != NULL)
            {
                i++;
            }
            if(strcmp(argv[0], "cd") == 0)
            {
                changeDirectory(i, argv);
            }
            else if(strcmp(argv[0], "exit") == 0)
            {
                if(!tooManyArguments(i, 1))
                {
                    exit(0);
                }
            }
            else if(strcmp(argv[0], "status") == 0)
            {
                getStatus(childExitMethod);
            }
            else if(argv[0][0] == '#')
            {
                sleep(0);
            }
            else
            {         
                spawnPid = fork();
                if(spawnPid == -1)
                {
                    perror("Bad Process!");
                    fflush(stdout);
                }
                else if(spawnPid == 0)
                {
                    if(isBG(i, argv))
                    {
                        
                        sigprocmask(SIG_SETMASK, &signalSet, NULL);
                        close(0);
                        inputF = open("/dev/null", O_RDONLY, 0644);
                        dup2(inputF,0);
    
                        close(1);
                        outputF = open("/dev/null", O_WRONLY, 0644);
                        dup2(outputF, 1);

                        argv[i-1] = NULL;
                        i--;
                    }
                    removeSymbols(argv, i);
                    execvp(argv[0], argv);

                    //If exec fails then print this message and exit with value 1
                    printf("%s: no such file or directory\n", argv[0]);
                    fflush(stdout);
                    exit(1);
                }
                if(!isBG(i, argv))
                {
                    waitpid(spawnPid, &childExitMethod, 0);
                    if(WIFSIGNALED(childExitMethod))
                    {
                        getStatus(childExitMethod);
                    }
                }
                else
                {
                    pidArr[pidNum].bg_pid = spawnPid;
                    pidArr[pidNum].fin = 0;
                    pidNum++;
                    printf("background pid is %d\n", spawnPid);
                    fflush(stdout);
                }
            }
        }
    }
}

void changeDirectory(int argc, char* argv[])
{
    if(tooManyArguments(argc, 2))
    {
        return;
    }
    else if(argc == 1)
    {
        chdir(getenv("HOME"));
    }
    else 
    {
        if(strcmp(argv[1], "~") == 0)
        {
            chdir(getenv("HOME"));
        }
        chdir(argv[1]);
    }

}

void getStatus(int exitMethod)
{
    if(WIFEXITED(exitMethod))
    {
        printf("exit value %d\n", WEXITSTATUS(exitMethod));  
        fflush(stdout);
    }
    else if(WIFSIGNALED(exitMethod))
    {
        printf("terminated by signal %d\n", WTERMSIG(exitMethod));
        fflush(stdout);
    }
}

int tooManyArguments(int argc, int num)
{
    if(argc > num)
    {
        printf("Too many arguments!\n");
        fflush(stdout);
        return 1;
    }
    return 0;
}

int isBG(int argc, char* argv[])
{
    if(strcmp(argv[argc-1], "&") == 0)
    {
        return 1;
    }
    return 0;
}

void catchSIGINT(int signo)
{
    char* message = "SIGINT caught\n";
    write(STDOUT_FILENO, message, 14);
}

void catchSIGTSTP(int signo)
{
}

void removeSymbols(char* argv[], int argc)
{
    int inputF, outputF;
    char* tempArgv[512];
    int i, k;
    k = 0;
    for(i=0; i<argc; i++)
    {
        //Input
        if(i == argc-1)
        {
            if(strcmp(argv[i], "<") == 0 || strcmp(argv[i], ">") == 0)
            {
                printf("no file specificed for redirection\n");
                exit(1);
            }
        }
        else if(strcmp(argv[i], "<") == 0 && argv[i+1] != NULL)
        {
            inputF = open(argv[i+1], O_RDONLY, 0644);
            if(inputF == -1)
            {
                printf("cannot open %s for input\n", argv[i+1]);
                exit(1);
            }
            else
            {
                close(0);
                dup2(inputF, 0);
                strcpy(argv[i], "X");
                strcpy(argv[i+1], "X");
            }

        } 
        //Output
        else if(strcmp(argv[i], ">") == 0 && argv[i+1] != NULL)
        {
            outputF = open(argv[i+1], O_WRONLY | O_TRUNC, 0644);
            if(outputF == -1)
            {
                outputF = open(argv[i+1], O_WRONLY | O_CREAT | O_TRUNC, 0644);
                if(outputF == -1)
                {
                    printf("cannot open %s for writing\n", argv[i+1]);
                    exit(1);
                }
                else
                {
                    close(1);
                    dup2(outputF, 1); 
                    strcpy(argv[i], "X");
                    strcpy(argv[i+1], "X");

                }
            }
            else
            {
                close(1);
                dup2(outputF, 1);
                strcpy(argv[i], "X");
                strcpy(argv[i+1], "X");

            }

        }
    }
    for(i=0; i<argc; i++)
    {
        if(strcmp(argv[i], "X") != 0)
        {
            argv[k] = argv[i];
            k++;
        }
        else
        {
            argv[i] = NULL;
        }
    }
}
